<?php

namespace App\Controllers;

use App\Core\AControllerBase;
use App\Core\Responses\Response;
use App\Models\Daily_menu;
use App\Models\Days;
use App\Models\Time_interval;
use App\Core\IAuthenticator;


class Daily_menuController extends AControllerBase
{
    public static bool $canShowAll = false;

    public function authorize(string $action)
    {
        return true;
        //return parent::authorize($action); // TODO: Change the autogenerated stub
    }

    public function index(): Response
    {
        $data = Daily_menu::getAll();
        $n_data = ['message' => ""];
        //$n_data = ['message' => "Dnešné menu na deň " + Days::getOne(date('w')->getName()];
        //if ($column->getDay() == date('w') || ($auth->isLogged() && $auth->getLoggedUserName() == "Admin")) {
        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            foreach ($data as $column) {
                array_push($n_data, $column);
            }
        } else {
            $cislo = 0;
            foreach ($data as $column) {
                if (self::isTimeInInterval(floatval(date('H.i')))) {
                    if ($column->getDay() == date('w')) {
                        array_push($n_data, $column);
                        $cislo = $cislo + 1;
                    }
                    if ($cislo != 0){
                        $n_data['message'] = "Ponuka na dnešný deň";//+ Days::getOne(date('w'))->getName();
                    } else {
                        //$n_data
                        $n_data['message'] = "Bohužiaľ pre tento deň nie je k dispozícií žiadna ponuka";
                    }
                } else {
                    $n_data['message'] = "Bohužiaľ ponuka denných menu nie je v tomto čase k dispozícií";
                }
            }
            //$data = $n_data;
        }

        return $this->html($n_data);
    }

    private function validDay(string $day): int {
        $data = Days::getAll();
        foreach ($data as $column) {
            if ($column->getName() == $day) {
                return $column->getId();
            }
        }
        return -1;
    }

    public function add(): Response
    {
        $message = "";
        $data = $this->request()->getPost();
        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            if (isset($data["day"]) && isset($data["name"]) && isset($data["ingredients"]) && isset($data["price"])) {
                if (filter_var($data["price"], FILTER_VALIDATE_FLOAT) === false || $data["price"] <= 0) {
                    $message = "Zle zadaná suma";
                } else {
                    $dayID = $this->validDay($data["day"]);
                    if ($dayID == -1) {
                        $message = "Zle zadaný deň";
                    } else {
                        $menu = new Daily_menu();
                        $menu->setName($data["name"]);
                        $menu->setDay($dayID);
                        $menu->setIngredients($data["ingredients"]);
                        $menu->setPrice($data["price"]);
                        if (isset($_FILES['img']) && $_FILES['img']['error'] == UPLOAD_ERR_OK) {
                            $imgName = time() . "_" . $_FILES['img']['name'];
                            $imgPath = "C:\Users\micha\php_mysql\www\U-FOOD-Z\Semestralka\public\images" . DIRECTORY_SEPARATOR . $imgName;
                            if (move_uploaded_file($_FILES['img']['tmp_name'], $imgPath)) {
                                $menu->setPicture($imgName);
                            }
                        } else {
                            $imgName = "default_daily_menu.img";
                            $menu->setPicture($imgName);
                        }
                        $menu->save();
                        return $this->redirect("?c=daily_menu");
                    }
                }
            }
        } else {
            $message = "Nie ste autorizovaný pridávať veci";
        }
        $menu = new Daily_menu();
        $data = ['nadpis' => "Pridanie", 'message' => $message, 'picture' => $menu->getPicture(), 'name' => $menu->getName(), 'day' => "", 'ingredients' => $menu->getIngredients(), 'price' => $menu->getPrice()];
        return $this->html($data);
    }

    public function edit(): Response
    {
        $message = "";
        $menu_id = $this->request()->getValue("id");
        $menu = Daily_menu::getOne($menu_id);
        $data = $this->request()->getPost();
        if ($menu == null) {
            return $this->redirect("?c=daily_menu");
        }

        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            if (isset($data["day"]) && isset($data["name"]) && isset($data["ingredients"]) && isset($data["price"])) {
                if (filter_var($data["price"], FILTER_VALIDATE_FLOAT) === false || $data["price"] > 0) {
                    $message = "Zle zadaná suma";
                } else {
                    $dayID = $this->validDay($data["day"]);
                    if ($dayID == -1) {
                        $message = "Zle zadaný deň";
                    } else {
                        $menu->setDay($dayID);
                        $menu->setName($data["name"]);
                        $menu->setIngredients($data["ingredients"]);
                        $menu->setPrice($data["price"]);
                        if (isset($_FILES['img']) && $_FILES['img']['error'] == UPLOAD_ERR_OK) {
                            $imgName = time() . "_" . $_FILES['img']['name'];
                            $imgPath = "C:\Users\micha\php_mysql\www\U-FOOD-Z\Semestralka\public\images" . DIRECTORY_SEPARATOR . $imgName;
                            if (move_uploaded_file($_FILES['img']['tmp_name'], $imgPath)) {
                                $menu->setPicture($imgName);
                            }
                        } else {
                            $imgName = "default_daily_menu.img";
                            $menu->setPicture($imgName);
                        }
                        $menu->save();
                        return $this->redirect("?c=daily_menu");
                    }
                }
            }
        } else {
            $message = "Nie ste autorizovaný meniť veci";
        }

        $den = Days::getOne($menu->getDay())->getName();
        $data = ['nadpis' => "Edit", 'message' => $message, 'name' => $menu->getName(), 'day' => $den, 'ingredients' => $menu->getIngredients(), 'price' => $menu->getPrice()];
        return $this->html($data, "add");
    }

    public function edit_time(): Response
    {
        $time_od = Time_interval::getOne(1);
        $time_do = Time_interval::getOne(2);
        $n_data = ['message' => "", 'od' => $time_od->getTime(), 'do' => $time_do->getTime()];
        $data = $this->request()->getPost();
        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            if (isset($data["od"]) && isset($data["do"])) {
                if (filter_var($data["od"], FILTER_VALIDATE_FLOAT) === false || filter_var($data["do"], FILTER_VALIDATE_FLOAT) === false) {
                    $n_data['message'] = "Zle zadané čísla";
                } else {
                    if ($data["od"] > 0 && $data["od"] < $data["do"] && $data["do"] < 24) {
                        $time_od->setTime($data["od"]);
                        $time_od->save();
                        $time_do->setTime($data["do"]);
                        $time_do->save();
                        $n_data['od'] = $time_od->getTime();
                        $n_data['do'] = $time_do->getTime();
                        return $this->redirect("?c=daily_menu");
                    } else {
                        $n_data['message'] = "Neplatná hodnota čísel";
                    }
                }
            }
        }
        return $this->html($n_data, "edit_time");
    }

    public function delete(): Response
    {
        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            $menu_id = $this->request()->getValue("id");
            $menu = Daily_menu::getOne($menu_id);
            if ($menu != null) {
                $menu->delete();
            }
        }
        return $this->redirect("?c=daily_menu");
    }

    public static function isTimeInInterval(float $time): bool
    {
        $start = Time_interval::getOne('1');
        $end = Time_interval::getOne('2');
        if ($time <= $end->getTime() && $time >= $start->getTime()) {
            return true;
        } else {
            return false;
        }
    }
}
