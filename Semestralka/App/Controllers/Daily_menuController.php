<?php

namespace App\Controllers;

use App\Core\AControllerBase;
use App\Core\Responses\Response;
use App\Models\Daily_menu;
use App\Models\Days;
use App\Models\Time_interval;

class Daily_menuController extends AControllerBase
{
    public static bool $canShowAll = false;

    public function authorize(string $action)
    {
        return true;
        //return parent::authorize($action); // TODO: Change the autogenerated stub
    }

    public function index(): Response
    {
        //if (!Daily_menuController::$canShowAll) {
        //    $array = [];
       //     $type = Daily_menu::getAll();
       //     foreach ($type as $prvok) {
       //         if ($prvok->getDay() == date('w')) {
       //            $array[] = $prvok;
       //         }
       //     }
        //} else {
        //    $array = Daily_menu::getAll();
        //}
        $array = Daily_menu::getAll();
        return $this->html($array);
    }

    private function calculateDay(string $day): int {
        $cislo = 0;
        switch ($day) {
            case "Pondelok":
                $cislo = 1;
                break;
            case "Utorok":
                $cislo = 2;
                break;
            case "Streda":
                $cislo = 3;
                break;
            case "Å tvrtok":
                $cislo = 4;
                break;
            case "Piatok":
                $cislo = 5;
                break;
            case "Sobota":
                $cislo = 6;
                break;
            default:
                $cislo = 0;
                break;
        }
        return $cislo;
    }

    public function add(): Response
    {
        $data = $this->request()->getPost();
        if (isset($data["day"]) && isset($data["name"]) && isset($data["ingredients"]) && isset($data["price"])) {
            $dni = Days::getAll();
            $menu = new Daily_menu();
            //$menu->setDay(date('w'));
            $menu->setDay($this->calculateDay($data["day"]));
            $menu->setName($data["name"]);
            $menu->setIngredients($data["ingredients"]);
            $menu->setPrice($data["price"]);
            $menu->save();
            return $this->redirect("?c=daily_menu");
        } else {

        }
        return $this->html(new Daily_menu());
    }

    public function edit(): Response
        {
            $menu_id = $this->request()->getValue("id");
            $menu = Daily_menu::getOne($menu_id);
            $data = $this->request()->getPost();
            if ($menu == null) {
                return $this->redirect("?c=daily_menu");
            }

            if (isset($data["day"]) && isset($data["name"]) && isset($data["ingredients"]) && isset($data["price"])) {
                $menu->setDay($this->calculateDay($data["day"]));
                $menu->setName($data["name"]);
                $menu->setIngredients($data["ingredients"]);
                $menu->setPrice($data["price"]);
                $menu->save();
                return $this->redirect("?c=daily_menu");
            }

            return $this->html($menu, "add");
        }

    public function delete(): Response
    {
        $menu_id = $this->request()->getValue("id");
        $menu = Daily_menu::getOne($menu_id);
        $menu?->delete();
        return  $this->redirect("?c=daily_menu");
    }

    public static function isTimeInInterval(float $time): bool
    {
        $start = Time_interval::getOne('1');
        $end = Time_interval::getOne('2');
        if ($time <= $end->getTime() && $time >= $start->getTime()) {
            return true;
        } else {
            return false;
        }
    }

    public static function showAll(string $user): void
    {
        if ($user == "Admin") {
            Daily_menuController::$canShowAll = true;
        } else {
            Daily_menuController::$canShowAll = false;
        }
    }
}
