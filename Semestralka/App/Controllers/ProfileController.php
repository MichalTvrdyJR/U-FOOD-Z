<?php

namespace App\Controllers;

use App\Core\AControllerBase;
use App\Core\Responses\Response;
use App\Models\Cart;
use App\Models\Profile;
use App\Core\IAuthenticator;

/**
 * Class HomeController
 * Example class of a controller
 * @package App\Controllers
 */
class ProfileController extends AControllerBase
{
    public function authorize(string $action)
    {
        return true;
        //return parent::authorize($action); // TODO: Change the autogenerated stub
    }

    public function index(): Response
    {
        $data = Profile::getAll();
        $n_data = ['message' => ""];
        if ($this->app->getAuth()->isLogged()) {
            if ($this->app->getAuth()->getLoggedUserName() == "Admin") {
                foreach ($data as $column) {
                    array_push($n_data, $column);
                }
            } else {
                foreach (Profile::getAll() as $column) {
                    if ($column->getName() == $this->app->getAuth()->getLoggedUserName()) {
                        array_push($n_data, $column);
                    }
                }
            }
        } else {
            $n_data['message'] = "Nie ste prihlásený";
        }

        return $this->html($n_data);
    }

    /*public function add(): Response
    {
        $data = $this->request()->getPost();
        if (isset($data["type"])) {
            $food = new Food_type();
            $food->setType($data["type"]);
            $food->save();
            return $this->redirect("?c=menu");
        }

        return $this->html(new Food_type());
    }*/

    public function edit(): Response
    {
        $message = "";
        $profile_id = $this->request()->getValue("id");
        $profile = Profile::getOne($profile_id);
        $data = $this->request()->getPost();
        if ($profile == null) {
            return $this->redirect("?c=profile");
        }

        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() != "Admin" && $this->app->getAuth()->getLoggedUserId() == $profile_id) {
            if (isset($data["name"]) && isset($data["surname"]) && isset($data["email"]) && isset($data["phone"])) {
                if (!strpos($data["email"], "@") || !strpos($data["email"], ".")) {
                    $message =  "Email je zle zadaný";
                } else  if (!preg_match('/^[0-9]{10}+$/', $data["phone"])) {
                    $message = "Telefónne číslo zle zadané";
                } else {
                    $profile->setName($data["name"]);
                    $profile->setSurname($data["surname"]);
                    $profile->setEmail($data["email"]);
                    $profile->setPhone($data["phone"]);
                    if (isset($_FILES['img']) && $_FILES['img']['error'] == UPLOAD_ERR_OK) {
                        $imgName = time() . "_" . $_FILES['img']['name'];
                        $imgPath = "C:\Users\micha\php_mysql\www\U-FOOD-Z\Semestralka\public\images" . DIRECTORY_SEPARATOR . $imgName;
                        if (move_uploaded_file($_FILES['img']['tmp_name'], $imgPath)) {
                            $profile->setPicture($imgName);
                        }
                    } else {
                        $imgName = "default_profile.img";
                        $profile->setPicture($imgName);
                    }
                    $profile->save();
                    return $this->redirect("?c=profile");
                }
            }
        } else {
            //$message = $this->app->getAuth()->getLoggedUserId();
            $message = "Nemáte oprávnenie meniť údaje";
        }

        $data = ['message' => $message, 'picture' => $profile->getPicture(), 'name' => $profile->getName(), 'surname' => $profile->getSurname(), 'email' => $profile->getEmail(), 'phone' => $profile->getPhone()];
        return $this->html($data);
    }

    public function delete(): Response
    {
        if ($this->app->getAuth()->isLogged() && $this->app->getAuth()->getLoggedUserName() == "Admin") {
            $profile_id = $this->request()->getValue("id");
            $profile = Profile::getOne($profile_id);
            if ($profile != null) {
                $cart = Cart::getAll();
                foreach ($cart as $column) {
                    if ($column->getProfile() == $profile_id) {
                        $column->delete();
                    }
                }
                $profile->delete();
            }
            return  $this->redirect("?c=profile");
        }
        return  $this->html();
    }

    /**
     * @return Response
     * @throws \Exception
     */

    public function emailCheck() : Response {
        $email = $_REQUEST["emailCheck"];
        $exists = Profile::getOneByEmail($email);
        $output = false;

        if ($exists) {
            $output = true;
        }

        return $this->json($output);
    }
}